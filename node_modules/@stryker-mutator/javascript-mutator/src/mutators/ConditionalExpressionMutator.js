"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var types = require("@babel/types");
var NodeGenerator_1 = require("../helpers/NodeGenerator");
/**
 * Represents a mutator which can remove the conditional clause from statements.
 */
var ConditionalExpressionMutator = /** @class */ (function () {
    function ConditionalExpressionMutator() {
        this.validOperators = [
            '!=',
            '!==',
            '&&',
            '<',
            '<=',
            '==',
            '===',
            '>',
            '>=',
            '||',
        ];
        this.name = 'ConditionalExpression';
    }
    ConditionalExpressionMutator.prototype.hasValidParent = function (node) {
        return (!node.parent ||
            !(types.isForStatement(node.parent) ||
                types.isWhileStatement(node.parent) ||
                types.isIfStatement(node.parent) ||
                types.isDoWhileStatement(node.parent)));
    };
    ConditionalExpressionMutator.prototype.isValidOperator = function (operator) {
        return this.validOperators.indexOf(operator) !== -1;
    };
    ConditionalExpressionMutator.prototype.mutate = function (node) {
        if ((types.isBinaryExpression(node) || types.isLogicalExpression(node)) &&
            this.hasValidParent(node) &&
            this.isValidOperator(node.operator)) {
            return [
                NodeGenerator_1.NodeGenerator.createBooleanLiteralNode(node, false),
                NodeGenerator_1.NodeGenerator.createBooleanLiteralNode(node, true),
            ];
        }
    };
    return ConditionalExpressionMutator;
}());
exports.default = ConditionalExpressionMutator;
//# sourceMappingURL=ConditionalExpressionMutator.js.map