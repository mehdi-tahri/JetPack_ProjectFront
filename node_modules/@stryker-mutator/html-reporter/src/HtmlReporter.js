"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var path = require("path");
var util = require("./util");
var plugin_1 = require("@stryker-mutator/api/plugin");
var fileUrl = require("file-url");
var bindMutationTestReport_1 = require("./templates/bindMutationTestReport");
var DEFAULT_BASE_FOLDER = path.normalize('reports/mutation/html');
exports.RESOURCES_DIR_NAME = 'strykerResources';
var HtmlReporter = /** @class */ (function () {
    function HtmlReporter(options, log) {
        this.options = options;
        this.log = log;
    }
    HtmlReporter.prototype.onMutationTestReportReady = function (report) {
        this.mainPromise = this.generateReport(report);
    };
    HtmlReporter.prototype.wrapUp = function () {
        return this.mainPromise;
    };
    HtmlReporter.prototype.generateReport = function (report) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var indexFileName;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        indexFileName = path.resolve(this.baseDir, 'index.html');
                        return [4 /*yield*/, this.cleanBaseFolder()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, Promise.all([
                                util.copyFile(require.resolve('mutation-testing-elements/dist/mutation-test-elements.js'), path.resolve(this.baseDir, 'mutation-test-elements.js')),
                                util.copyFile(path.resolve(__dirname, 'templates', 'stryker-80x80.png'), path.resolve(this.baseDir, 'stryker-80x80.png')),
                                util.copyFile(path.resolve(__dirname, 'templates', 'index.html'), path.resolve(this.baseDir, 'index.html')),
                                util.writeFile(path.resolve(this.baseDir, 'bind-mutation-test-report.js'), bindMutationTestReport_1.bindMutationTestReport(report))
                            ])];
                    case 2:
                        _a.sent();
                        this.log.info("Your report can be found at: " + fileUrl(indexFileName));
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(HtmlReporter.prototype, "baseDir", {
        get: function () {
            if (!this._baseDir) {
                if (this.options.htmlReporter && this.options.htmlReporter.baseDir) {
                    this._baseDir = this.options.htmlReporter.baseDir;
                    this.log.debug("Using configured output folder " + this._baseDir);
                }
                else {
                    this.log.debug("No base folder configuration found (using configuration: htmlReporter: { baseDir: 'output/folder' }), using default " + DEFAULT_BASE_FOLDER);
                    this._baseDir = DEFAULT_BASE_FOLDER;
                }
            }
            return this._baseDir;
        },
        enumerable: true,
        configurable: true
    });
    HtmlReporter.prototype.cleanBaseFolder = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, util.deleteDir(this.baseDir)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, util.mkdir(this.baseDir)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    HtmlReporter.inject = plugin_1.tokens(plugin_1.commonTokens.options, plugin_1.commonTokens.logger);
    return HtmlReporter;
}());
exports.default = HtmlReporter;
//# sourceMappingURL=HtmlReporter.js.map