"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@stryker-mutator/util");
var plugin_1 = require("@stryker-mutator/api/plugin");
var _1 = require(".");
var getName = function (packageName) {
    return packageName.replace('@stryker-mutator/', '')
        .replace('stryker-', '')
        .split('-')[0];
};
var mapSearchResultToPromptOption = function (searchResults) { return searchResults.results.map(function (result) { return ({
    name: getName(result.package.name),
    pkg: result.package
}); }); };
var handleResult = function (from) { return function (response) {
    if (response.statusCode === 200 && response.result) {
        return response.result;
    }
    else {
        throw new Error("Path " + from + " resulted in http status code: " + response.statusCode + ".");
    }
}; };
var NpmClient = /** @class */ (function () {
    function NpmClient(log, searchClient, packageClient) {
        this.log = log;
        this.searchClient = searchClient;
        this.packageClient = packageClient;
    }
    NpmClient.prototype.getTestRunnerOptions = function () {
        return this.search('/v2/search?q=keywords:@stryker-mutator/test-runner-plugin')
            .then(mapSearchResultToPromptOption);
    };
    NpmClient.prototype.getTestFrameworkOptions = function (testRunnerFilter) {
        return this.search('/v2/search?q=keywords:@stryker-mutator/test-framework-plugin')
            .then(function (searchResult) {
            if (testRunnerFilter) {
                searchResult.results = searchResult.results.filter(function (framework) { return framework.package.keywords.indexOf(testRunnerFilter) >= 0; });
            }
            return searchResult;
        })
            .then(mapSearchResultToPromptOption);
    };
    NpmClient.prototype.getMutatorOptions = function () {
        return this.search('/v2/search?q=keywords:@stryker-mutator/mutator-plugin')
            .then(mapSearchResultToPromptOption);
    };
    NpmClient.prototype.getTranspilerOptions = function () {
        return this.search('/v2/search?q=keywords:@stryker-mutator/transpiler-plugin')
            .then(mapSearchResultToPromptOption);
    };
    NpmClient.prototype.getTestReporterOptions = function () {
        return this.search("/v2/search?q=keywords:@stryker-mutator/reporter-plugin")
            .then(mapSearchResultToPromptOption);
    };
    NpmClient.prototype.getAdditionalConfig = function (pkg) {
        var _this = this;
        var path = "/" + pkg.name + "@" + pkg.version + "/package.json";
        return this.packageClient.get(path)
            .then(handleResult(path))
            .then(function (pkg) { return pkg.initStrykerConfig || {}; })
            .catch(function (err) {
            _this.log.warn("Could not fetch additional initialization config for dependency " + pkg.name + ". You might need to configure it manually", err);
            return {};
        });
    };
    NpmClient.prototype.search = function (path) {
        var _this = this;
        this.log.debug("Searching: " + path);
        return this.searchClient.get(path)
            .then(handleResult(path))
            .catch(function (err) {
            _this.log.error("Unable to reach npms.io (for query " + path + "). Please check your internet connection.", util_1.errorToString(err));
            var result = {
                results: [],
                total: 0
            };
            return result;
        });
    };
    NpmClient.inject = plugin_1.tokens(plugin_1.commonTokens.logger, _1.initializerTokens.restClientNpmSearch, _1.initializerTokens.restClientNpm);
    return NpmClient;
}());
exports.default = NpmClient;
//# sourceMappingURL=NpmClient.js.map