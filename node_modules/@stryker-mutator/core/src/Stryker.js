"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("./polyfills");
var MutantTestMatcher_1 = require("./mutants/MutantTestMatcher");
var InputFileResolver_1 = require("./input/InputFileResolver");
var ScoreResultCalculator_1 = require("./ScoreResultCalculator");
var TempFolder_1 = require("./utils/TempFolder");
var MutatorFacade_1 = require("./mutants/MutatorFacade");
var InitialTestExecutor_1 = require("./process/InitialTestExecutor");
var MutationTestExecutor_1 = require("./process/MutationTestExecutor");
var LogConfigurator_1 = require("./logging/LogConfigurator");
var TranspilerFacade_1 = require("./transpiler/TranspilerFacade");
var di_1 = require("./di");
var plugin_1 = require("@stryker-mutator/api/plugin");
var MutantTranspileScheduler_1 = require("./transpiler/MutantTranspileScheduler");
var SandboxPool_1 = require("./SandboxPool");
var transpiler_1 = require("./transpiler");
var MutationTestReportCalculator_1 = require("./reporters/MutationTestReportCalculator");
var Stryker = /** @class */ (function () {
    /**
     * The Stryker mutation tester.
     * @constructor
     * @param {Object} [cliOptions] - Optional options.
     */
    function Stryker(cliOptions) {
        LogConfigurator_1.default.configureMainProcess(cliOptions.logLevel, cliOptions.fileLogLevel, cliOptions.allowConsoleColors);
        this.injector = di_1.buildMainInjector(cliOptions);
        this.log = this.injector.resolve(plugin_1.commonTokens.getLogger)(Stryker.name);
        // Log level may have changed
        LogConfigurator_1.default.configureMainProcess(this.options.logLevel, this.options.fileLogLevel, this.options.allowConsoleColors);
    }
    Object.defineProperty(Stryker.prototype, "reporter", {
        get: function () {
            return this.injector.resolve(di_1.coreTokens.reporter);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stryker.prototype, "options", {
        get: function () {
            return this.injector.resolve(plugin_1.commonTokens.options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stryker.prototype, "timer", {
        get: function () {
            return this.injector.resolve(di_1.coreTokens.timer);
        },
        enumerable: true,
        configurable: true
    });
    Stryker.prototype.runMutationTest = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var loggingContext, inputFiles, inputFileInjector, initialTestRunProcess, initialRunResult, mutator, transpilerProvider, transpiler, transpiledFiles, mutationTestProcessInjector, testableMutants, mutationTestExecutor, mutantResults;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, LogConfigurator_1.default.configureLoggingServer(this.options.logLevel, this.options.fileLogLevel, this.options.allowConsoleColors)];
                    case 1:
                        loggingContext = _a.sent();
                        this.timer.reset();
                        return [4 /*yield*/, this.injector.injectClass(InputFileResolver_1.default).resolve()];
                    case 2:
                        inputFiles = _a.sent();
                        if (!inputFiles.files.length) return [3 /*break*/, 15];
                        TempFolder_1.TempFolder.instance().initialize();
                        inputFileInjector = this.injector
                            .provideValue(di_1.coreTokens.loggingContext, loggingContext)
                            .provideValue(di_1.coreTokens.inputFiles, inputFiles);
                        initialTestRunProcess = inputFileInjector
                            .provideValue(plugin_1.commonTokens.produceSourceMaps, this.options.coverageAnalysis !== 'off')
                            .provideFactory(di_1.coreTokens.pluginCreatorTranspiler, di_1.PluginCreator.createFactory(plugin_1.PluginKind.Transpiler))
                            .provideClass(di_1.coreTokens.transpiler, TranspilerFacade_1.TranspilerFacade)
                            .injectClass(InitialTestExecutor_1.default);
                        return [4 /*yield*/, initialTestRunProcess.run()];
                    case 3:
                        initialRunResult = _a.sent();
                        mutator = inputFileInjector.injectClass(MutatorFacade_1.MutatorFacade);
                        transpilerProvider = inputFileInjector
                            .provideValue(di_1.coreTokens.initialRunResult, initialRunResult)
                            .provideValue(plugin_1.commonTokens.produceSourceMaps, false)
                            .provideFactory(di_1.coreTokens.transpiler, transpiler_1.transpilerFactory);
                        transpiler = transpilerProvider.resolve(di_1.coreTokens.transpiler);
                        return [4 /*yield*/, transpiler.transpile(inputFiles.files)];
                    case 4:
                        transpiledFiles = _a.sent();
                        mutationTestProcessInjector = transpilerProvider
                            .provideValue(di_1.coreTokens.transpiledFiles, transpiledFiles)
                            .provideClass(di_1.coreTokens.mutantTranspileScheduler, MutantTranspileScheduler_1.MutantTranspileScheduler)
                            .provideClass(di_1.coreTokens.sandboxPool, SandboxPool_1.SandboxPool);
                        return [4 /*yield*/, mutationTestProcessInjector
                                .injectClass(MutantTestMatcher_1.MutantTestMatcher)
                                .matchWithMutants(mutator.mutate(inputFiles.filesToMutate))];
                    case 5:
                        testableMutants = _a.sent();
                        _a.label = 6;
                    case 6:
                        _a.trys.push([6, , 13, 15]);
                        if (!(initialRunResult.runResult.tests.length && testableMutants.length)) return [3 /*break*/, 11];
                        mutationTestExecutor = mutationTestProcessInjector
                            .injectClass(MutationTestExecutor_1.MutationTestExecutor);
                        return [4 /*yield*/, mutationTestExecutor.run(testableMutants)];
                    case 7:
                        mutantResults = _a.sent();
                        return [4 /*yield*/, this.reportScore(mutantResults, inputFileInjector)];
                    case 8:
                        _a.sent();
                        return [4 /*yield*/, TempFolder_1.TempFolder.instance().clean()];
                    case 9:
                        _a.sent();
                        return [4 /*yield*/, this.logDone()];
                    case 10:
                        _a.sent();
                        return [2 /*return*/, mutantResults];
                    case 11:
                        this.logRemark();
                        _a.label = 12;
                    case 12: return [3 /*break*/, 15];
                    case 13:
                        // `injector.dispose` calls `dispose` on all created instances
                        // Namely the `SandboxPool` and the `ChildProcessProxy` instances
                        mutationTestProcessInjector.dispose();
                        return [4 /*yield*/, LogConfigurator_1.default.shutdown()];
                    case 14:
                        _a.sent();
                        return [7 /*endfinally*/];
                    case 15: return [2 /*return*/, Promise.resolve([])];
                }
            });
        });
    };
    Stryker.prototype.logDone = function () {
        this.log.info('Done in %s.', this.timer.humanReadableElapsed());
    };
    Stryker.prototype.logRemark = function () {
        if (!this.log.isTraceEnabled()) {
            this.log.info('Trouble figuring out what went wrong? Try `npx stryker run --fileLogLevel trace --logLevel debug` to get some more info.');
        }
    };
    Stryker.prototype.reportScore = function (mutantResults, inputFileInjector) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var calculator, score;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        inputFileInjector.injectClass(MutationTestReportCalculator_1.MutationTestReportCalculator).report(mutantResults);
                        calculator = this.injector.injectClass(ScoreResultCalculator_1.default);
                        score = calculator.calculate(mutantResults);
                        this.reporter.onScoreCalculated(score);
                        calculator.determineExitCode(score, this.options.thresholds);
                        return [4 /*yield*/, this.reporter.wrapUp()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Stryker;
}());
exports.default = Stryker;
//# sourceMappingURL=Stryker.js.map